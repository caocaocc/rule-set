package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// IPSet 表示一组IP地址及其相关信息
type IPSet struct {
	Name    string
	URLs    []string
	IPs     []string
	BaseDir string
}

// Formatter 定义了规则格式化接口
type Formatter interface {
	Format(ips []string, params ...string) string
	Extension() string
	NeedsHeader() bool
}

// 各种格式的实现
type (
	TxtFormatter struct{}
	ListFormatter struct{}
	YAMLFormatter struct{}
	JSONFormatter struct{}
	SnippetFormatter struct{}
)

func (TxtFormatter) Format(ips []string, _ ...string) string {
	return strings.Join(ips, "\n")
}
func (TxtFormatter) Extension() string    { return "txt" }
func (TxtFormatter) NeedsHeader() bool    { return true }

func (ListFormatter) Format(ips []string, _ ...string) string {
	var result []string
	for _, ip := range ips {
		prefix := "IP-CIDR"
		if strings.Contains(ip, ":") {
			prefix = "IP-CIDR6"
		}
		result = append(result, prefix+","+ip)
	}
	return strings.Join(result, "\n")
}
func (ListFormatter) Extension() string    { return "list" }
func (ListFormatter) NeedsHeader() bool    { return true }

func (YAMLFormatter) Format(ips []string, _ ...string) string {
	var result []string
	result = append(result, "payload:")
	for _, ip := range ips {
		result = append(result, fmt.Sprintf("  - '%s'", ip))
	}
	return strings.Join(result, "\n")
}
func (YAMLFormatter) Extension() string    { return "yaml" }
func (YAMLFormatter) NeedsHeader() bool    { return true }

func (JSONFormatter) Format(ips []string, _ ...string) string {
	data := struct {
		Version int `json:"version"`
		Rules   []struct {
			IPCIDR []string `json:"ip_cidr"`
		} `json:"rules"`
	}{
		Version: 2,
		Rules: []struct {
			IPCIDR []string `json:"ip_cidr"`
		}{{IPCIDR: ips}},
	}
	bytes, _ := json.MarshalIndent(data, "", "  ")
	return string(bytes)
}
func (JSONFormatter) Extension() string    { return "json" }
func (JSONFormatter) NeedsHeader() bool    { return false }

func (SnippetFormatter) Format(ips []string, params ...string) string {
	policy := params[0]
	var result []string
	for _, ip := range ips {
		prefix := "ip-cidr"
		if strings.Contains(ip, ":") {
			prefix = "ip6-cidr"
		}
		result = append(result, fmt.Sprintf("%s, %s, %s", prefix, ip, policy))
	}
	return strings.Join(result, "\n")
}
func (SnippetFormatter) Extension() string    { return "snippet" }
func (SnippetFormatter) NeedsHeader() bool    { return true }

// NewIPSet 创建新的IP集合
func NewIPSet(name string, urls []string, baseDir string) *IPSet {
	return &IPSet{
		Name:    name,
		URLs:    urls,
		BaseDir: baseDir,
	}
}

// Fetch 获取IP列表
func (s *IPSet) Fetch() error {
	var allIPs []string
	for _, url := range s.URLs {
		resp, err := http.Get(url)
		if err != nil {
			return fmt.Errorf("fetch %s: %w", url, err)
		}
		defer resp.Body.Close()

		body, err := io.ReadAll(resp.Body)
		if err != nil {
			return fmt.Errorf("read %s: %w", url, err)
		}

		for _, line := range strings.Split(string(body), "\n") {
			line = strings.TrimSpace(line)
			if line != "" && !strings.HasPrefix(line, "#") {
				allIPs = append(allIPs, line)
			}
		}
	}
	s.IPs = allIPs
	return nil
}

// Generate 生成所有格式的规则文件
func (s *IPSet) Generate(policy string) error {
	if err := s.Fetch(); err != nil {
		return err
	}

	formatters := []Formatter{
		TxtFormatter{},
		ListFormatter{},
		YAMLFormatter{},
		JSONFormatter{},
		SnippetFormatter{},
	}

	header := fmt.Sprintf("# Generated by https://github.com/caocaocc/rule-set\n"+
		"# Last Modified: %s\n\n",
		time.Now().UTC().Format("Mon, 02 Jan 2006 15:04:05 MST"))

	for _, formatter := range formatters {
		var content string
		if formatter.Extension() == "snippet" {
			content = formatter.Format(s.IPs, policy)
		} else {
			content = formatter.Format(s.IPs)
		}

		if formatter.NeedsHeader() {
			content = header + content
		}

		filename := filepath.Join(s.BaseDir, fmt.Sprintf("%s-ip.%s", s.Name, formatter.Extension()))
		if err := os.WriteFile(filename, []byte(content), 0644); err != nil {
			return fmt.Errorf("write %s: %w", filename, err)
		}

		fmt.Printf("%s-ip.%s has been generated successfully in '%s'.\n", s.Name, formatter.Extension(), s.BaseDir)
	}

	return nil
}